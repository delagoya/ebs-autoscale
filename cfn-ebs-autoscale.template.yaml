---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Launches a ECS Optimized AMI for customization for AWS Batch.'
Parameters:
  InstanceType:
    Description: EC2 instance type, either t2.large or t2.xlarge.
    Type: String
    Default: t2.large
    AllowedValues:
    - t2.large
    - t2.xlarge
    ConstraintDescription: "Must be  't2.large' or 't2.xlarge'."
  VpcId:
    Description: The VPC to launch into
    Type: AWS::EC2::VPC::Id
  VPCSubnetId:
    Description: The VPC subnet to launch into. MAKE SURE IT IS IN THE VPC THAT YOU DEFINED IN PREVIOUS STEPS.
    Type: AWS::EC2::Subnet::Id
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair that is on your local machine.
  SSHLocation:
    Description: " The IP address range that can be used to SSH to the EC2 instances"
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  Mappings:

    # These are the latest ECS optimized AMIs as of Feb 2018:
    #
    #   amzn-ami-2017.09.h-amazon-ecs-optimized
    #   ECS agent:    1.17.1
    #   Docker:       17.09.1-ce
    #   ecs-init:     1.17.1-1
    #
    # You can find the latest available on this page of our documentation:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    # (note the AMI identifier is region specific)

    AWSRegionToAMI:
      us-east-2:
        AMI: ami-b86a5ddd
      us-east-1:
        AMI: ami-a7a242da
      us-west-2:
        AMI: ami-92e06fea
      us-west-1:
        AMI: ami-9ad4dcfa
      eu-west-3:
        AMI: ami-698b3d14
      eu-west-2:
        AMI: ami-f4e20693
      eu-west-1:
        AMI: ami-0693ed7f
      eu-central-1:
        AMI: ami-0799fa68
      ap-northeast-2:
        AMI: ami-a5dd70cb
      ap-northeast-1:
        AMI: ami-68ef940e
      ap-southeast-2:
        AMI: ami-ee884f8c
      ap-southeast-1:
        AMI: ami-0a622c76
      ca-central-1:
        AMI: ami-5ac94e3e
      ap-south-1:
        AMI: ami-2e461a41
      sa-east-1:
        AMI: ami-d44008b8
Resources:
  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/PowerUserAccess
      - arn:aws:iam::aws:policy/IAMReadOnlyAccess
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: Ec2InstanceRole
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: VpcId
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp:
          Ref: SSHLocation
  LoginServerInstance:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install a simple application
      AWS::CloudFormation::Init:
        configSets:
          default:
            - "packagesAndFiles"
            - "bootstrapOperations"
        packagesAndFiles:
          packages:
            yum:
              aws-cli: []
              jq: []
              java-1.8.0-openjdk: []
              java-1.8.0-openjdk-devel: []
          files:
            "/home/ec2-user/cromwell/cromwell-31.jar":
              source: "https://github.com/broadinstitute/cromwell/releases/download/31/cromwell-31.jar"
              mode: "000644"
              group: ec2-user
              owner: ec2-user
            "/home/ec2-user/cromwell/womtool-31.jar":
              source: "https://github.com/broadinstitute/cromwell/releases/download/31/womtool-31.jar"
              mode: "000644"
              group: ec2-user
              owner: ec2-user
            "/home/ec2-user/.aws/config":
              content:
                  Fn::Join:
                  - "\n"
                  - - "[default]"
                    - !Sub "region = ${AWS::Region}"
              mode: "000644"
              group: ec2-user
              owner: ec2-user
            "/etc/cfn/cfn-hup.conf":
                content:
                  Fn::Join:
                  - ""
                  - - "[main]\n"
                    - "stack="
                    - Ref: "AWS::StackId"
                    - "\n"
                    - "region="
                    - Ref: "AWS::Region"
                    - "\n"
                mode: "000400"
                owner: "root"
                group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content:
                Fn::Join:
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - 'triggers=post.update'
                  - "\n"
                  - 'path=Resources.LoginServerInstance.Metadata.AWS::CloudFormation::Init'
                  - "\n"
                  - 'action=/opt/aws/bin/cfn-init -v --stack '
                  - Ref: AWS::StackName
                  - " --resource LoginServerInstance "
                  - " --configsets default "
                  - " --region "
                  - Ref: AWS::Region
                  - "\n"
                  - 'runas=root'
                  - "\n"
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        bootstrapOperations:
          commands:
            extractFiles:
              cwd: "/"
              command:
                Fn::Join:
                - "\n"
                - - "tar -xzf docker-ebs-autoscale.tar.gz"
                  - "service "
    Properties:
      IamInstanceProfile:
        Ref: EC2InstanceProfile
      ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      Tags:
      - Key: Application
        Value:
          Ref: AWS::StackId
      NetworkInterfaces:
      - GroupSet:
        - Ref: InstanceSecurityGroup
        AssociatePublicIpAddress: 'true'
        DeviceIndex: '0'
        DeleteOnTermination: 'true'
        SubnetId:
          Ref: VPCSubnetId
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "#!/bin/bash -xe\n"
            - 'yum install -y aws-cfn-bootstrap'
            - "\n"
            - "/opt/aws/bin/cfn-init -v "
            - "         --stack "
            - Ref: AWS::StackName
            - "         --resource LoginServerInstance "
            - "         --region "
            - Ref: AWS::Region
            - "\n"
            - "/opt/aws/bin/cfn-signal -e $? "
            - "         --stack "
            - Ref: AWS::StackName
            - "         --resource LoginServerInstance "
            - "         --region "
            - Ref: AWS::Region
            - "\n"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
Outputs:
  PublicIp:
    Value: !GetAtt LoginServerInstance.PublicIp
    Description: Newly created instance IP address
